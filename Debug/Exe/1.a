;#define CE                      PORTD.2
;#define CSN                     PORTD.7
;#define SCK                     PORTD.3
;#define MOSI                    PORTD.6
;#define MISO                    PIND.4
;#define IRQ                     PIND.5
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;#include <stdio.h>
;#include <rf.c>
;//HU?NG D?N G?I-NH?N ? DU?I CÙNG
;
;// SPI(nRF24L01) commands
;#define READ_REG        0x00  // Define read command to register
;#define WRITE_REG       0x20  // Define write command to register
;#define RD_RX_PLOAD     0x61  // Define RX payload register address
;#define WR_TX_PLOAD     0xA0  // Define TX payload register address
;#define FLUSH_TX        0xE1  // Define flush TX register command
;#define FLUSH_RX        0xE2  // Define flush RX register command
;#define REUSE_TX_PL     0xE3  // Define reuse TX payload register command
;#define NOP             0xFF  // Define No Operation, might be used to read status register
;//------------------------
;#define RX_DR    0x40
;#define TX_DS    0x20
;#define MAX_RT   0x10
;//-------------------------
;
;#define CONFIG          0x00  // 'Config' register address
;#define EN_AA           0x01  // 'Enable Auto Acknowledgment' register address
;#define EN_RXADDR       0x02  // 'Enabled RX addresses' register address
;#define SETUP_AW        0x03  // 'Setup address width' register address
;#define SETUP_RETR      0x04  // 'Setup Auto. Retrans' register address
;#define RF_CH           0x05  // 'RF channel' register address
;#define RF_SETUP        0x06  // 'RF setup' register address
;#define STATUS          0x07  // 'Status' register address
;#define OBSERVE_TX      0x08  // 'Observe TX' register address
;#define RPD          	0x09  // 'Carrier Detect' register address
;#define RX_ADDR_P0      0x0A  // 'RX address pipe0' register address
;#define RX_ADDR_P1      0x0B  // 'RX address pipe1' register address
;#define RX_ADDR_P2      0x0C  // 'RX address pipe2' register address
;#define RX_ADDR_P3      0x0D  // 'RX address pipe3' register address
;#define RX_ADDR_P4      0x0E  // 'RX address pipe4' register address
;#define RX_ADDR_P5      0x0F  // 'RX address pipe5' register address
;#define TX_ADDR         0x10  // 'TX address' register address
;#define RX_PW_P0        0x11  // 'RX payload width, pipe0' register address
;#define RX_PW_P1        0x12  // 'RX payload width, pipe1' register address
;#define RX_PW_P2        0x13  // 'RX payload width, pipe2' register address
;#define RX_PW_P3        0x14  // 'RX payload width, pipe3' register address
;#define RX_PW_P4        0x15  // 'RX payload width, pipe4' register address
;#define RX_PW_P5        0x16  // 'RX payload width, pipe5' register address
;#define FIFO_STATUS     0x17  // 'FIFO Status Register' register address
;#define FEATURE         0x1D  // 'FEATURE' register address
;#define DYNPD           0x1C  // 'DYNAMIC PAYLOAD' register address
;/*----------------------
;M?i d?a ch? truy?n-nh?n g?m 5byte
;Ch? d? Multireceive thì 1 PRX có th? nh?n du?c cùng lúc t? 6 PTX khác nhau
;D? li?u s? trao d?i qua các Pipe, t? Pipe_0 d?n Pipe_5
;T? Pipe_2 tr? di, d?a ch? nh?n s? có 4 byte d?u gi?ng d?a ch? c?a Pipe_1
;
;? bên G?I
;PTX_0: 5byte (Address1)
;PTX_1: 5byte (Address2)
;PTX_2: 4byte (Address2) + 1 byte (Address3)
;PTX_3: 4byte (Address2) + 1 byte (Address4)
;PTX_4: 4byte (Address2) + 1 byte (Address5)
;PTX_5: 4byte (Address2) + 1 byte (Address6)
;
;? bên NH?N do ch? có 1 con nên ta quan tâm d?n d?a ch? các pipe nh?n khác nhau
;Pipe0_RX_Add: 5byte (Address1)
;Pipe1_RX_Add: 5byte (Address2)
;Pipe2_RX_Add: 4byte (Address2) + 1 byte (Address3)
;Pipe3_RX_Add: 4byte (Address2) + 1 byte (Address4)
;Pipe4_RX_Add: 4byte (Address2) + 1 byte (Address5)
;Pipe5_RX_Add: 4byte (Address2) + 1 byte (Address6)
;
;----------------------*/
;unsigned char Send_Add, Address1, Address2, Address3, Address4;
;/*-------SPI---------*/
;void SPI_Write(unsigned char Buff);
;unsigned char SPI_Read(void);
;void RF_Command(unsigned char command);
;void RF_Write(unsigned char Reg_Add, unsigned char Value);
;void RF_Write_Add(unsigned char Reg_Add, unsigned char Value);
;void Common_Config();
;/*-------TX_Mode---------*/
;void RF_Write_Add_TX_2(unsigned char Reg_Add, unsigned char Address, unsigned char Address2);
;void TX_Address(unsigned char Address);
;void TX_Address_2(unsigned char Address, unsigned char Address2);
;void TX_Mode();
;void TX_Config();
;void TX_Config_2();
;void TX_Send();
;/*-------RX_Mode---------*/
;void RF_Write_Add_RX_2(unsigned char Reg_Add, unsigned char Address, unsigned char Address2);
;void RX_Address(unsigned char Address_Pipe, unsigned char Address);
;void RX_Address_2(unsigned char Address_Pipe, unsigned char Address, unsigned char Address2);
;void RX_Mode();
;void RX_Config();
;void RX_Config_4();
;void RX_Read();
;
;
;
;/*----------------------
;C?u trúc d? li?u d?ng typedef s? chuy?n d? li?u struct trong m?ng station_info v?i
;các thu?c tính c?a struct bên trong và gán vào station_receiver cho bên nh?n ho?c
;station_send cho bên g?i.
;----------------------*/
;typedef struct{
;    int temp;
;    int humid;
;    int light;
;    int soil;
;}station_info;
;
;station_info station_receive;
;station_info station_send;
;/*----------------------
;Ðây là hàm ghi d? li?u vào SPI
;Do không dùng modul SPI c?ng trên các chân I/O c?a AVR
;Nên s? d?ng hàm này d? ghi d? li?u vào
;Ð?ng th?i d?c giá tr? mà SPI tr? v?, tham v?ng check du?c ACK
;----------------------*/
;void SPI_Write(unsigned char Buff){
; 0000 000D void SPI_Write(unsigned char Buff){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;    unsigned char bit_ctr;
;    for(bit_ctr=0;bit_ctr<8;bit_ctr++){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	Buff -> Y+1
;	bit_ctr -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;        MOSI = (Buff & 0x80);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;        delay_us(5);
;PCODE: $00000024 VOL: 0
;        Buff = (Buff << 1);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;        SCK = 1;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;        delay_us(5);
;PCODE: $0000002A VOL: 0
;        Buff |= MISO;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;        SCK = 0;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;    }
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;}
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;/*----------------------
;Ðây là hàm d?c d? li?u ra t? SPI
;Do không dùng modul SPI c?ng trên các chân I/O c?a AVR
;Nên s? d?ng hàm này d? d?c d? li?u ra
;----------------------*/
;unsigned char SPI_Read(void){
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;    unsigned char Buff=0;
;    unsigned char bit_ctr;
;    for(bit_ctr=0;bit_ctr<8;bit_ctr++){
;PCODE: $0000003E VOL: 0
;	Buff -> R17
;	bit_ctr -> R16
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;        delay_us(5);
;PCODE: $0000004A VOL: 0
;        Buff = (Buff << 1);
;PCODE: $0000004B VOL: 0
;        SCK = 1;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;        delay_us(5);
;PCODE: $0000004E VOL: 0
;        Buff |= MISO;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;        SCK = 0;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;    }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;    return(Buff);
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;}
;PCODE: $0000005D VOL: 0
;/*----------------------
;RF_Command dùng d? ghi Command tr?c ti?p vào nRF24L01
;----------------------*/
;void RF_Command(unsigned char command){
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;    CSN=0;
;PCODE: $00000060 VOL: 0
;	command -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;    SPI_Write(command);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;    CSN=1;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;    delay_us(10);
;PCODE: $00000067 VOL: 0
;}
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;/*----------------------
;RF_Write dùng d? ghi d? li?u vào thanh ghi c?a nRF24L01
;----------------------*/
;void RF_Write(unsigned char Reg_Add, unsigned char Value){
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;    CSN=0;
;PCODE: $0000006D VOL: 0
;	Reg_Add -> Y+1
;	Value -> Y+0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;    SPI_Write(0b00100000|Reg_Add);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;    SPI_Write(Value);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;    CSN=1;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;    delay_us(10);
;PCODE: $00000078 VOL: 0
;}
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;/*----------------------
;RF_Write_Add dùng d? ghi d?a ch? cho nRF24L01
;L?nh này dùng du?c ? c? PTX và PRX vì truy?n nh?n 1-1
;? dây ghi cùng lúc 5 byte d?a ch? gi?ng h?t nhau vào cùng 1 thanh ghi
;Thu?ng dùng khi truy?n-nh?n 1-1
;----------------------*/
;void RF_Write_Add(unsigned char Reg_Add, unsigned char Value){
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;    CSN=0;
;PCODE: $0000007E VOL: 0
;	Reg_Add -> Y+1
;	Value -> Y+0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;    SPI_Write(0b00100000|Reg_Add);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;    SPI_Write(Value);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;    SPI_Write(Value);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;    SPI_Write(Value);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;    SPI_Write(Value);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;    SPI_Write(Value);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;    CSN=1;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;    delay_us(10);
;PCODE: $00000091 VOL: 0
;}
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;/*----------------------
;RF_Write_Add_TX_2 dùng d? ghi d?a ch? TRUY?N cho nRF24L01 trong ch? d? Multireceive
;Khi g?i b?t d?u t? PTX_2 tr? di thì b?t bu?c 4byte d?a ch? sau ph?i gi?ng d?a ch?
;c?a PTX_1 nên ph?i ghi 4 byte d?a ch? sau theo Address2 (là d?a ch? c?a PTX_1)
;Chú ý: Address ? dây ng?m d?nh là d?a ch? c?a PTX_2...5
;----------------------*/
;void RF_Write_Add_TX_2(unsigned char Reg_Add, unsigned char Address, unsigned char Address2){
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;    CSN=0;
;PCODE: $00000097 VOL: 0
;	Reg_Add -> Y+2
;	Address -> Y+1
;	Address2 -> Y+0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;    SPI_Write(0b00100000|Reg_Add);
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;    SPI_Write(Address);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;    SPI_Write(Address2);
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;    SPI_Write(Address2);
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;    SPI_Write(Address2);
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;    SPI_Write(Address2);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;    CSN=1;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;    delay_us(10);
;PCODE: $000000AA VOL: 0
;}
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;/*----------------------
;RF_Write_Add_RX_2 dùng d? ghi d?a ch? NH?N cho nRF24L01 trong ch? d? Multireceive
;Khi g?i b?t d?u t? PTX_2 tr? di thì b?t bu?c 4byte d?a ch? sau ph?i gi?ng d?a ch?
;c?a PTX_1 nên ph?i ghi 4 byte d?a ch? sau theo Address2 (là d?a ch? c?a PTX_1)
;Chú ý: Address ? dây ng?m d?nh là d?a ch? c?a PTX_2...5
;Có l? do bên PTX Address du?c ghi vào d?u tiên nên ? PRX Address ph?i du?c ghi vào
;cu?i cùng. Theo logic truy?n - nh?n n?i ti?p
;----------------------*/
;void RF_Write_Add_RX_2(unsigned char Reg_Add, unsigned char Address, unsigned char Address2){
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;    CSN=0;
;PCODE: $000000B0 VOL: 0
;	Reg_Add -> Y+2
;	Address -> Y+1
;	Address2 -> Y+0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;    SPI_Write(0b00100000|Reg_Add);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;    SPI_Write(Address2);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;    SPI_Write(Address2);
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;    SPI_Write(Address2);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;    SPI_Write(Address2);
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;    SPI_Write(Address);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;    CSN=1;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;    delay_us(10);
;PCODE: $000000C3 VOL: 0
;}
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;/*----------------------
;TX_Address dùng d? ghi d?a ch? vào thanh ghi d?a ch? c?a PTX ? ch? d? truy?n nh?n 1-1
;ho?c ch? d? Multireceive thì ? các PTX_0 và PTX_1
;----------------------*/
;void TX_Address(unsigned char Address){
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;    CSN=0;
;PCODE: $000000C9 VOL: 0
;	Address -> Y+0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;    RF_Write(SETUP_AW,0b00000011); //ghi vào d? r?ng d?a ch? -  5byte
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;    CSN=1;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;    delay_us(10);
;PCODE: $000000D2 VOL: 0
;    CSN=0;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;    RF_Write_Add(TX_ADDR, Address); //thanh ghi d?a ch? truy?n
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;}
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;/*----------------------
;TX_Address_2 dùng d? ghi d?a ch? vào thanh ghi d?a ch? c?a PTX ? ch? d? Multireceive
;L?nh này b?t d?u ghi ? các PTX_2 tr? di d?n PTX_5
;Ð? r?ng d?a ch? cung là 5byte
;----------------------*/
;void TX_Address_2(unsigned char Address, unsigned char Address2){
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;    CSN=0;
;PCODE: $000000DE VOL: 0
;	Address -> Y+1
;	Address2 -> Y+0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;    RF_Write(SETUP_AW,0b00000011);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;    CSN=1;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;    delay_us(10);
;PCODE: $000000E7 VOL: 0
;    CSN=0;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;    RF_Write_Add_TX_2(TX_ADDR, Address, Address2);
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;}
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;/*----------------------
;RX_Address dùng d? ghi d?a ch? vào thanh ghi d?a ch? c?a PRX ? ch? d? truy?n nh?n 1-1
;ho?c ch? d? Multireceive thì ? các Pipe_0 và Pipe_1
;Ð? r?ng d?a ch? là 5byte
;----------------------*/
;void RX_Address(unsigned char Address_Pipe, unsigned char Address){
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;    CSN=0;
;PCODE: $000000F5 VOL: 0
;	Address_Pipe -> Y+1
;	Address -> Y+0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;    RF_Write(SETUP_AW,0b00000011);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;    CSN=1;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;    delay_us(10);
;PCODE: $000000FE VOL: 0
;    CSN=0;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;    RF_Write_Add(Address_Pipe, Address);
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;}
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;/*----------------------
;RX_Address_2 dùng d? ghi d?a ch? vào thanh ghi d?a ch? c?a PRX ? ch? d? Multireceive
;L?nh này b?t d?u ghi ? các Pipe_2 tr? di d?n Pipe_5
;Ð? r?ng d?a ch? cung là 5byte
;Address2 ng?m hi?u là d?a ch? c?a pipe 1
;Address ng?m hi?u là d?a ch? c?a Pipe t? 2 - Pipe 5
;----------------------*/
;void RX_Address_2(unsigned char Address_Pipe, unsigned char Address, unsigned char Address2){
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;    CSN=0;
;PCODE: $0000010A VOL: 0
;	Address_Pipe -> Y+2
;	Address -> Y+1
;	Address2 -> Y+0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;    RF_Write(SETUP_AW,0b00000011);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;    CSN=1;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;    delay_us(10);
;PCODE: $00000113 VOL: 0
;    CSN=0;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;    RF_Write_Add_RX_2(Address_Pipe, Address, Address2);  //ghi vao pipe number, d?a ch? và d?a ch? pipe 1
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;}
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;/*----------------------
;Config cho nRF24L01 ? ch? d? ho?t d?ng
;M?c d?nh là ch? d? truy?n d? li?u, thanh ghi CONFIG 0x1E
;Flush TX và RX d? xoá h?t d? li?u trong b? d?m
;----------------------*/
;void Common_Config(){
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;    CE=1;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;	delay_us(700);
;PCODE: $00000123 VOL: 0
;	CE=0;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;    CSN=1;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;    SCK=0;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;    delay_us(100);
;PCODE: $0000012A VOL: 0
;    RF_Write(STATUS,0b01111110); //STATUS 0x7E; clear all IRQ flag
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;    RF_Command(0b11100010);    //0xE2; flush RX
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;	RF_Command(0b11100001);    //Flush TX 0xE1
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;    RF_Write(CONFIG,0b00011111); //0x1E; truy?n d? li?u
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;    delay_ms(2);
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;	RF_Write(RF_CH,0b00000010); //RF_CH 0x05 Chanel 0 RF = 2400 + RF_CH* (1or 2 M)
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;	RF_Write(RF_SETUP,0b00000111); //RF_SETUP 0x07 = 1M, 0dBm
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;    RF_Write(FEATURE, 0b00000100); //0x1D Dynamic payload length
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;	RF_Write(EN_AA, 0b00000000); //0x1D Dynamic payload length
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;}
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;/*----------------------
;Ðua nRF24L01 v? ch? d? truy?n d? li?u
;Lúc này c?n xoá h?t các thanh ghi trong IRQ và dua chân CE ? m?c th?p
;----------------------*/
;void TX_Mode(){
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;    CE=0;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;    RF_Write(CONFIG,0b00011110);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;    delay_us(130);    //nrf can de khoi dong vao rx mode hoac txmode
;PCODE: $00000154 VOL: 0
;}
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;/*----------------------
;Ðua nRF24L01 v? ch? d? nh?n d? li?u
;Lúc này c?n xoá h?t các thanh ghi trong IRQ và dua chân CE lên m?c cao
;----------------------*/
;void RX_Mode(){
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;    RF_Write(CONFIG,0b00011111);
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;    CE=1;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;    delay_us(130);    //nrf can de khoi dong vao rx mode hoac txmode
;PCODE: $0000015F VOL: 0
;}
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;/*----------------------
;Config cho nRF24L01 ? ch? d? TRUY?N d? li?u 1-1 ho?c ch? d? Multireceive
;thì config cho các PTX_0 và PTX_1
;Xoá h?t d? li?u trong thanh ghi IRQ
;Flush h?t d? li?u ? b? d?m nh?n và truy?n.
;Cài d?t dynamic payload ? Pipe_0
;Enable Pipe_0 d? truy?n d? li?u
;----------------------*/
;void TX_Config(){
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;    RF_Write(STATUS,0b01111110); //xoá IRQ flag
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;    RF_Command(0b11100001); //Flush TX 0xE1
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;    TX_Address(Send_Add);   //Ghi d?a ch? g?i d? li?u vào nRF24L01
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;	RF_Write(DYNPD,0b00000001); //Ð?t ch? d? dynamic paypload ? pipe 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;	RF_Write(EN_RXADDR,0b00000001); //Enable Pipe 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;}
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;/*----------------------
;TX_Config_2()
;Config cho nRF24L01 ? ch? d? TRUY?N d? li?u Multireceive
;Dùng cho các PTX t? PTX_2 d?n PTX_5
;Xoá h?t d? li?u trong thanh ghi IRQ
;Flush h?t d? li?u ? b? d?m nh?n và truy?n.
;G?i di thì dùng Pipe_0 ? PTX nên ch? cài d?t dynamic payload ? Pipe_0
;Enable Pipe_0 d? truy?n d? li?u
;----------------------*/
;void TX_Config_2(){
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;    RF_Write(STATUS,0b01111110); //xoá IRQ flag
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;    RF_Command(0b11100001); //Flush TX 0xE1
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;    TX_Address_2(Send_Add, Address2); //Ghi d?a ch? g?i d? li?u vào nRF24L01
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;    RF_Write(DYNPD,0b00000001); //Ð?t ch? d? dynamic paypload ? pipe 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;    RF_Write(EN_RXADDR,0b00000001); //Enable Pipe 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;}
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;/*----------------------
;RX_Config()
;Config cho nRF24L01 ? ch? d? NH?N d? li?u 1-1
;Xoá h?t d? li?u trong thanh ghi IRQ
;Flush h?t d? li?u ? b? d?m nh?n và truy?n.
;M? các Pipe t? 0 và cài d?t ch? d? dynamic payload
;? Pipe_0 d?a ch? du?c ghi vào theo 5 byte Address1
;----------------------*/
;void RX_Config(){
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;    RF_Write(STATUS,0b01111110); //xoá IRQ flag
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;    RF_Command(0b11100010); //Flush RX
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;    RF_Write(DYNPD,0b00000001); //Ð?t ch? d? dynamic paypload ? pipe 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;    RF_Write(EN_RXADDR,0b00000001); //Enable RX ? Pipe 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;    RX_Address(RX_ADDR_P0, Address1);
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;}
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;/*----------------------
;RX_Config_4()
;Config cho nRF24L01 ? ch? d? NH?N d? li?u Multireceive (4 Pipe)
;Xoá h?t d? li?u trong thanh ghi IRQ
;Flush h?t d? li?u ? b? d?m nh?n và truy?n.
;M? các Pipe t? 0 d?n 4 và cài d?t ch? d? dynamic payload
;? Pipe_0 d?a ch? du?c ghi vào theo 5 byte Address1
;? Pipe_1 d?a ch? du?c ghi vào theo 5 byte Address2
;? Pipe_2 d?a ch? du?c ghi vào theo 4 byte Address2 và 1 byte Address3
;? Pipe_3 d?a ch? du?c ghi vào theo 4 byte Address2 và 1 byte Address4
;----------------------*/
;void RX_Config_4(){
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;    RF_Write(STATUS,0b01111110); //xoá IRQ flag
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;    RF_Command(0b11100010); //0xE2 = Flush RX
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;    RF_Write(DYNPD,0b00001111); //Ð?t ch? d? dynamic paypload ? pipe 0-4
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;    RF_Write(EN_RXADDR,0b00001111); //Enable RX ? Pipe 0 - pipe 4
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;    RX_Address(RX_ADDR_P0, Address1);
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;    RX_Address(RX_ADDR_P1, Address2);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;    RX_Address_2(RX_ADDR_P2, Address3, Address2);
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;    RX_Address_2(RX_ADDR_P3, Address4, Address2);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;}
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;/*----------------------
;RX_Config_6()
;Config cho nRF24L01 ? ch? d? NH?N d? li?u Multireceive (6 Pipe)
;Xoá h?t d? li?u trong thanh ghi IRQ
;Flush h?t d? li?u ? b? d?m nh?n và truy?n.
;M? các Pipe t? 0 d?n 4 và cài d?t ch? d? dynamic payload
;? Pipe_0 d?a ch? du?c ghi vào theo 5 byte Address1
;? Pipe_1 d?a ch? du?c ghi vào theo 5 byte Address2
;? Pipe_2 d?a ch? du?c ghi vào theo 4 byte Address2 và 1 byte Address3
;? Pipe_3 d?a ch? du?c ghi vào theo 4 byte Address2 và 1 byte Address4
;? Pipe_4 d?a ch? du?c ghi vào theo 4 byte Address2 và 1 byte Address5
;? Pipe_5 d?a ch? du?c ghi vào theo 4 byte Address2 và 1 byte Address6
;----------------------*/
;
;/*----------------------
;TX_Send()
;Config cho nRF24L01 ? ch? d? TRUY?N d? li?u ? ch? d? 1-1
;Ho?c Multireceive nhung ? các PTX_0 và PTX_1
;Xoá h?t d? li?u trong thanh ghi IRQ
;Flush h?t d? li?u ? b? d?m truy?n.
;Ghi d? li?u c?n g?i vào payload truy?n
;Sau khi truy?n di thì xoá h?t các IRQ
;Ghi d?a ch? g?i d? li?u vào nRF24L01 - KHÔNG HI?U CH? NÀY
;Sau khi g?i d? li?u di thì FLUSH h?t b? d?m G?I
;----------------------*/
;void TX_Send(){
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;    TX_Address(Send_Add); //Ghi d?a ch? g?i d? li?u vào nRF24L01
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;    CSN=1;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;    delay_us(10);
;PCODE: $000001CB VOL: 0
;    CSN=0;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;    SPI_Write(0b11100001); //0xE1=Define flush TX register command
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;    CSN=1;
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;    delay_us(10);
;PCODE: $000001D2 VOL: 0
;    CSN=0;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;    SPI_Write(0b10100000); //0xA0 = Define TX payload register address
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;    SPI_Write(station_send.temp); //ghi d? li?u vào payload
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;    SPI_Write(station_send.humid);
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;    SPI_Write(station_send.light);
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;    SPI_Write(station_send.soil);
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;    CSN=1;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;    CE=1;
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;    delay_us(500);
;PCODE: $000001E6 VOL: 0
;    CE=0;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;    RF_Write(0x07,0b01111110); //STATUS, 0x7E-clear IRQ flag (Tam test 0x70 van chay)
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;    TX_Address(Send_Add); //Ghi d?a ch? g?i d? li?u vào nRF24L01
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;    RF_Command(0b11100001);//Flush TX 0xE1
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;}
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;/*----------------------
;TX_Send_2()
;Config cho nRF24L01 ? ch? d? TRUY?N d? li?u Multireceive t? PTX_2 và PTX_5
;Xoá h?t d? li?u trong thanh ghi IRQ
;Flush h?t d? li?u ? b? d?m truy?n.
;Ghi d? li?u c?n g?i vào payload truy?n
;Sau khi truy?n di thì xoá h?t các IRQ
;Ghi d?a ch? g?i d? li?u vào nRF24L01 - KHÔNG HI?U CH? NÀY
;Sau khi g?i d? li?u di thì FLUSH h?t b? d?m G?I
;----------------------*/
;
;/*----------------------
;RX_Read()
;Ð?c d? li?u t? buffer c?a b? NH?N d? li?u
;Ð?c t? b? d?m RX các giá tr? du?c luu vào khi nh?n du?c
;Sau khi d?c xong thì clear h?t các thanh ghi IRQ
;và Flush b? d?m nh?n
;----------------------*/
;void RX_Read(){
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;    CE=0;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;    CSN=1;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;    delay_us(10);
;PCODE: $000001F9 VOL: 0
;    CSN=0;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;    SPI_Write(0b01100001); //0x61 = Define RX payload register address
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;    delay_us(10);
;PCODE: $000001FE VOL: 0
;    station_receive.temp = SPI_Read();
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;    station_receive.humid = SPI_Read();
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;    station_receive.light = SPI_Read();
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;    station_receive.soil = SPI_Read();
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;    CSN=1;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;    CE=1;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;    RF_Write(STATUS,0b01111110); // 0x7E-clear IRQ flag
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;    RF_Command(0b11100010); //0xE2 = Flush RX
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;}
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;
;
;
;/*------------
;// Chuong trình g?i dành cho tr?m 1
;Send_Add = 0xA1;;  //Ðây chính là Send_Add lúc khai báo à ???
;Common_Config();
;TX_mode();
;TX_config();
;TX_send();
;
;// Chuong trình g?i dành cho tr?m 2
;Send_Add = 0xA2;
;Common_Config();
;TX_mode();
;TX_config();
;TX_send();
;
;// Chuong trình g?i dành cho tr?m 3
;Send_Add=0xA3;
;Address2=0xA2;
;Common_Config();
;TX_mode();
;TX_config_2();
;TX_send_2();
;
;// Chuong trình g?i dành cho tr?m 4
;Send_Add=0xA4;
;Address2=0xA2;
;Common_Config();
;TX_mode();
;TX_config_2();
;TX_send_2();
;// Chuong trình g?i dành cho tr?m 5
;Address2=0xA2;
;Address5=0xA5;
;Common_Config();
;TX_mode();
;TX_config_2();
;TX_send_2();
;// Chuong trình g?i dành cho tr?m 6
;Address2=0xA2;
;Address6=0xA6;
;Common_Config();
;TX_mode();
;TX_config_2();
;TX_send_2();
;// Chuong trình nh?n dành cho 4 tr?m
;Address1 = 0xA1;
;Address2 = 0xA2;
;Address3 = 0xA3;
;Address4 = 0xA4;
;Common_Config();
;RX_Mode();
;RX_Config_4();
;if(IRQ == 0){
;        RX_Read();
;            }
;// Chuong trình nh?n dành cho 6 tr?m
;Address1 = 0xA1;
;Address2 = 0xA2;
;Address3 = 0xA3;
;Address4 = 0xA4;
;Address5 = 0xA5;
;Address6 = 0xA6;
;Common_Config();
;RX_Mode();
;RX_Config_6();
;if(IRQ == 0){
;        RX_Read();
;            }
;--------------*/
;#include <dc.c>
;#define PWM_1 OCR1A
;#define PWM_2 OCR1B
;#define DIR_1 PORTB.0
;#define DIR_2 PORTB.6
;
;#define motor_1 1
;#define motor_2 2
;#define run_thuan 0
;#define run_nguoc 1
;void control_motor(unsigned char motor,unsigned char dir_motor, unsigned char speed);
;void control_motor(unsigned char motor,unsigned char dir_motor, unsigned char speed)
; 0000 000E {
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;    switch(motor)
;PCODE: $0000021F VOL: 0
;	motor -> Y+2
;	dir_motor -> Y+1
;	speed -> Y+0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;    {
;        case 1:
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;        {   if(dir_motor==0)
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;            {
;             DIR_1 =  dir_motor;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;             PWM_1 = speed;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;             break;
;PCODE: $00000234 VOL: 0
;            }
;            else
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;            {
;             DIR_1 =  dir_motor;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;             PWM_1 =255- speed;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;             break;
;PCODE: $00000247 VOL: 0
;            }
;PCODE: $00000248 VOL: 0
;        }
;        case 2:
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;        {
;
;            if(dir_motor==0)
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;            {
;             DIR_2 =  dir_motor;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;             PWM_2 = speed;
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;             break;
;PCODE: $0000025E VOL: 0
;            }
;            else
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;            {
;             DIR_2 =  dir_motor;
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;             PWM_2 =255- speed;
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;             break;
;PCODE: $00000271 VOL: 0
;            }
;PCODE: $00000272 VOL: 0
;        }
;
;    }
;PCODE: $00000273 VOL: 0
;}
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;void bat()
;{
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;control_motor(1,1,255);
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;control_motor(2,1,255);
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;
;}
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;void tat()
;{
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;control_motor(1,0,0);
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;control_motor(2,0,0);
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;}
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;int dem;
;unsigned char p=0;
;int dem=0;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0013 {
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 0014 TCNT0=0x85;    //32ms
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 0015 /*
; 0000 0016         bat();
; 0000 0017         dem++;
; 0000 0018         if (dem == 200)
; 0000 0019         {
; 0000 001A             tat();
; 0000 001B         }
; 0000 001C */
; 0000 001D 
; 0000 001E     if(p==0)
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 001F         {
; 0000 0020             bat();
;PCODE: $0000029D VOL: 0
; 0000 0021             dem++;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 0022         }
; 0000 0023     if(dem == 100)
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 0024         {
; 0000 0025             p=1;
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 0026             tat();
;PCODE: $000002A7 VOL: 0
; 0000 0027         }
; 0000 0028     if (dem > 100)
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 0029         {
; 0000 002A             tat();
;PCODE: $000002AC VOL: 0
; 0000 002B         }
; 0000 002C }
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;
;void main(void)
; 0000 002F {
;PCODE: $000002B1 VOL: 0
; 0000 0030 
; 0000 0031 DDRB=(0<<DDB7) | (1<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 0032 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 0033 
; 0000 0034 DDRC=(0<<DDC6) | (1<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 0035 PORTC=(0<<PORTC6) | (1<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 0036 
; 0000 0037 DDRD=(1<<DDD7) | (1<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 0038 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (1<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 0039 
; 0000 003A TCCR0=(1<<CS02) | (0<<CS01) | (1<<CS00);
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 003B TCNT0=0x00;
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 003C 
; 0000 003D // Timer/Counter 1 initialization
; 0000 003E // Clock source: System Clock
; 0000 003F // Clock value: 125.000 kHz
; 0000 0040 // Mode: Fast PWM top=0x03FF
; 0000 0041 // OC1A output: Non-Inverted PWM
; 0000 0042 // OC1B output: Non-Inverted PWM
; 0000 0043 // Noise Canceler: Off
; 0000 0044 // Input Capture on Falling Edge
; 0000 0045 // Timer Period: 8.192 ms
; 0000 0046 // Output Pulse(s):
; 0000 0047 // OC1A Period: 8.192 ms Width: 0 us// OC1B Period: 8.192 ms Width: 0 us
; 0000 0048 // Timer1 Overflow Interrupt: Off
; 0000 0049 // Input Capture Interrupt: Off
; 0000 004A // Compare A Match Interrupt: Off
; 0000 004B // Compare B Match Interrupt: Off
; 0000 004C TCCR1A=(1<<COM1A1) | (0<<COM1A0) | (1<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (1<<WGM10);
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 004D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
; 0000 004E TCNT1H=0x00;
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 004F TCNT1L=0x00;
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
; 0000 0050 ICR1H=0x00;
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 0051 ICR1L=0x00;
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0052 OCR1AH=0x00;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0053 OCR1AL=0x00;
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
; 0000 0054 OCR1BH=0x00;
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 0055 OCR1BL=0x00;
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0056 
; 0000 0057 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0058 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 0059 
; 0000 005A #asm("sei")
;PCODE: $000002D8 VOL: 0
	sei
;PCODE: $000002D9 VOL: 0
; 0000 005B Address1 = 0xA1;
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 005C 
; 0000 005D delay_ms(200);
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 005E Common_Config();
;PCODE: $000002DF VOL: 0
; 0000 005F RX_Mode();
;PCODE: $000002E0 VOL: 0
; 0000 0060 RX_Config();
;PCODE: $000002E1 VOL: 0
; 0000 0061 delay_ms(200);
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
; 0000 0062 tat();
;PCODE: $000002E5 VOL: 0
; 0000 0063 while (1)
;PCODE: $000002E6 VOL: 0
; 0000 0064     {
; 0000 0065         if (IRQ == 0)
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 0066             {
; 0000 0067                 RX_Read();
;PCODE: $000002EA VOL: 0
; 0000 0068                 PORTC.5=~PORTC.5;
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 0069                 if(station_receive.soil <2)
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 006A                     {
; 0000 006B                       p=1;
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 006C                     }
; 0000 006D                 delay_ms(10);
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
; 0000 006E                 RX_Config();
;PCODE: $000002FF VOL: 0
; 0000 006F             }
; 0000 0070     }
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
; 0000 0071 }
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
